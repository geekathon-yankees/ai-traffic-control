name: "Deploy Backend to AWS EC2"

on:
  workflow_dispatch:
  push:

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}
      - name: Ensure DEPLOY_PATH exists on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "mkdir -p /app/ml-gateway && chmod 755 /app/ml-gateway && chown ec2-user:ec2-user /app/ml-gateway || true"
      - name: Copy backend files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r ml-gateway/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }}:/app/ml-gateway/
      - name: Ensure Python 3 and pip on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "if ! python3 --version; then \
            if [ -f /etc/os-release ] && grep -qi 'ubuntu\|debian' /etc/os-release; then \
              sudo apt-get update && sudo apt-get install -y python3; \
            elif [ -f /etc/os-release ] && grep -qi 'amzn' /etc/os-release; then \
              sudo yum install -y python3; \
            else \
              echo 'Unsupported OS. Please install Python 3 manually.'; exit 1; \
            fi; \
          fi; \
          if ! python3 -m pip --version; then \
            curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py && sudo python3 get-pip.py && rm get-pip.py; \
          fi"
      - name: Clean up disk space
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            # Clean package cache
            sudo yum clean all 2>/dev/null || sudo apt-get clean 2>/dev/null || true
            # Clean pip cache
            python3 -m pip cache purge 2>/dev/null || true
            # Clean temporary files
            sudo rm -rf /tmp/* 2>/dev/null || true
            sudo rm -rf /var/tmp/* 2>/dev/null || true
            # Show available space
            df -h /
          "
      - name: Install Python dependencies with optimizations
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            cd /app/ml-gateway && 
            python3 -m pip install --user --no-cache-dir --progress-bar off -r requirements.txt || {
              echo 'Installation failed due to disk space, trying CPU-only PyTorch...'
              
              # Create CPU-only requirements by removing heavy GPU packages
              cat > requirements_cpu.txt << 'EOF'
fastapi>=0.115.0
uvicorn[standard]>=0.30.6
huggingface_hub>=0.24.6
ultralytics>=8.3.0
opencv-python-headless>=4.10.0
numpy>=1.26.0
pydantic>=2.9.0
pydantic-settings>=2.5.0
python-multipart>=0.0.9
transformers>=4.44.0
pillow>=10.0.0
timm>=0.9.0
psutil>=5.9.0
EOF
              
              # Install CPU-only PyTorch from PyTorch index
              python3 -m pip install --user --no-cache-dir --index-url https://download.pytorch.org/whl/cpu torch torchvision
              # Install remaining requirements
              python3 -m pip install --user --no-cache-dir --progress-bar off -r requirements_cpu.txt
            }
          "
      - name: Stop existing backend process
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "pkill -f 'python3.*main.py' || echo 'No existing process found'"
      - name: Start backend application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "cd /app/ml-gateway && nohup python3 -m uvicorn app.main:app --host 0.0.0.0 --port 8000 > /app/ml-gateway/app.log 2>&1 &"
      - name: Verify backend deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "sleep 5 && ps aux | grep '[u]vicorn.*main:app' && echo 'Backend deployed successfully' || echo 'Backend deployment may have failed'"
      - name: Show application logs
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "tail -20 /app/ml-gateway/app.log || echo 'Log file not found'"
      - name: Final cleanup
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            # Clean up pip cache and temp files after installation
            python3 -m pip cache purge 2>/dev/null || true
            sudo rm -rf /tmp/* 2>/dev/null || true
            # Show final disk usage
            echo 'Final disk usage:'
            df -h /
          "
