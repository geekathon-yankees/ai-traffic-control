name: "Deploy Backend to AWS EC2"

on:
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}
      - name: Ensure DEPLOY_PATH exists on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "mkdir -p /app/ml-gateway && chmod 755 /app/ml-gateway && chown ec2-user:ec2-user /app/ml-gateway || true"
      - name: Copy backend files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r ml-gateway/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }}:/app/ml-gateway/
      - name: Ensure Python 3 and system dependencies on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "if ! python3 --version; then \
            if [ -f /etc/os-release ] && grep -qi 'ubuntu\|debian' /etc/os-release; then \
              sudo apt-get update && sudo apt-get install -y python3; \
            elif [ -f /etc/os-release ] && grep -qi 'amzn' /etc/os-release; then \
              sudo yum install -y python3; \
            else \
              echo 'Unsupported OS. Please install Python 3 manually.'; exit 1; \
            fi; \
          fi; \
          if ! python3 -m pip --version; then \
            curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py && sudo python3 get-pip.py && rm get-pip.py; \
          fi; \
          echo 'Installing OpenCV system dependencies...'; \
          if [ -f /etc/os-release ] && grep -qi 'ubuntu\|debian' /etc/os-release; then \
            sudo apt-get update && sudo apt-get install -y libgl1-mesa-glx libglib2.0-0; \
          elif [ -f /etc/os-release ] && grep -qi 'amzn' /etc/os-release; then \
            sudo yum install -y libglvnd-glx glib2; \
          fi"
      - name: Clean up disk space
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            # Clean package cache
            sudo yum clean all 2>/dev/null || sudo apt-get clean 2>/dev/null || true
            # Clean pip cache
            sudo python3 -m pip cache purge 2>/dev/null || python3 -m pip cache purge 2>/dev/null || true
            # Clean temporary files
            sudo rm -rf /tmp/* 2>/dev/null || true
            sudo rm -rf /var/tmp/* 2>/dev/null || true
            # Show available space
            df -h /
          "
      - name: Install Python dependencies with optimizations
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            cd /app/ml-gateway && 
            sudo python3 -m pip install --no-cache-dir --progress-bar off -r requirements.txt || {
              echo 'Installation failed due to disk space, trying CPU-only PyTorch...'
              
              # Create CPU-only requirements by removing heavy GPU packages
              echo 'fastapi>=0.115.0' > requirements_cpu.txt
              echo 'uvicorn[standard]>=0.30.6' >> requirements_cpu.txt
              echo 'huggingface_hub>=0.24.6' >> requirements_cpu.txt
              echo 'ultralytics>=8.3.0' >> requirements_cpu.txt
              echo 'opencv-python-headless>=4.10.0' >> requirements_cpu.txt
              echo 'numpy>=1.26.0' >> requirements_cpu.txt
              echo 'pydantic>=2.9.0' >> requirements_cpu.txt
              echo 'pydantic-settings>=2.5.0' >> requirements_cpu.txt
              echo 'python-multipart>=0.0.9' >> requirements_cpu.txt
              echo 'transformers>=4.44.0' >> requirements_cpu.txt
              echo 'pillow>=10.0.0' >> requirements_cpu.txt
              echo 'timm>=0.9.0' >> requirements_cpu.txt
              echo 'psutil>=5.9.0' >> requirements_cpu.txt
              
              # Install CPU-only PyTorch from PyTorch index
              sudo python3 -m pip install --no-cache-dir --index-url https://download.pytorch.org/whl/cpu torch torchvision
              # Install remaining requirements
              sudo python3 -m pip install --no-cache-dir --progress-bar off -r requirements_cpu.txt
            }
          "
      - name: Verify Python packages installation
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            echo 'Verifying Python packages are installed and accessible...'
            echo 'Testing uvicorn availability:'
            if sudo python3 -c 'import uvicorn; print(\"‚úÖ uvicorn available\")' 2>/dev/null; then
              echo '‚úÖ uvicorn is accessible with sudo'
            else
              echo '‚ùå uvicorn not accessible with sudo, checking regular user:'
              python3 -c 'import uvicorn; print(\"‚úÖ uvicorn available for user\")' 2>/dev/null || {
                echo '‚ùå uvicorn not available for either sudo or user'
                echo 'Available Python packages:'
                sudo python3 -m pip list | grep -i uvicorn || echo 'uvicorn not found in pip list'
                exit 1
              }
            fi
            echo 'Testing other key packages:'
            sudo python3 -c 'import fastapi, torch; print(\"‚úÖ fastapi and torch available\")' || echo '‚ö†Ô∏è Some packages may not be available'
            echo 'Package verification completed'
          "
      - name: Test SSH connection and debug
        run: |
          echo "Attempting to connect to: ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }}"
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -v ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "echo 'SSH connection successful'" || {
            echo "SSH connection failed. Please verify:"
            echo "1. EC2_HOST_BE secret is set to the correct IP/hostname"
            echo "2. EC2_USER secret is set correctly (usually 'ec2-user' for Amazon Linux)"
            echo "3. EC2_KEY secret contains the correct private key"
            echo "4. EC2 instance is running and accessible"
            exit 1
          }
      - name: Stop existing backend process
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            echo 'Stopping any existing backend processes...'
            sudo pkill -f 'uvicorn.*app.main:app' || echo 'No uvicorn processes found'
            sudo pkill -f 'python3.*main.py' || echo 'No main.py processes found'
            pkill -f 'uvicorn.*app.main:app' || echo 'No non-sudo uvicorn processes found'
            pkill -f 'python3.*main.py' || echo 'No non-sudo main.py processes found'
            # Wait a moment for processes to stop
            sleep 2
            echo 'Process cleanup completed'
          " || echo 'Failed to connect - continuing anyway'
      - name: Start backend application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "cd /app/ml-gateway && nohup sudo python3 -m uvicorn app.main:app --host 0.0.0.0 --port 80 > /app/ml-gateway/app.log 2>&1 &"
      - name: Wait for application to start
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            echo 'Waiting for application to start...'
            for i in {1..30}; do
              if ps aux | grep '[u]vicorn.*main:app' >/dev/null; then
                echo 'Application process started successfully'
                break
              fi
              if [ \$i -eq 30 ]; then
                echo 'Application failed to start within 30 seconds'
                echo 'Process status:'
                ps aux | grep python3 | grep -v grep
                echo 'App log:'
                sudo tail -20 /app/ml-gateway/app.log || tail -20 /app/ml-gateway/app.log || echo 'Could not read log file'
                exit 1
              fi
              echo 'Waiting... (\$i/30)'
              sleep 1
            done
          "
      - name: Verify backend is responding
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            echo 'Testing if backend is responding to requests...'
            for i in {1..20}; do
              if curl -s -f http://localhost:80/docs >/dev/null 2>&1; then
                echo '‚úÖ Backend is responding to HTTP requests!'
                echo 'FastAPI docs available at: http://\$(curl -s ipinfo.io/ip):80/docs'
                break
              fi
              if [ \$i -eq 20 ]; then
                echo '‚ùå Backend not responding to HTTP requests after 20 attempts'
                echo 'Process status:'
                ps aux | grep python3 | grep -v grep
                echo 'Last 30 lines of app log:'
                sudo tail -30 /app/ml-gateway/app.log || tail -30 /app/ml-gateway/app.log || echo 'Could not read log file'
                exit 1
              fi
              echo 'Waiting for HTTP response... (\$i/20)'
              sleep 2
            done
          "
      - name: Show application logs
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "sudo tail -20 /app/ml-gateway/app.log || tail -20 /app/ml-gateway/app.log || echo 'Log file not found'"
      - name: Final deployment status
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            echo '========================================='
            echo 'üéâ BACKEND DEPLOYMENT STATUS üéâ'
            echo '========================================='
            echo 'Application Status: RUNNING ‚úÖ'
            echo 'Process Info:'
            ps aux | grep uvicorn | grep -v grep
            echo ''
            echo 'Port Status:'
            netstat -tlnp | grep :80 || echo 'Port check failed - but app may still be starting'
            echo ''
            echo 'API Health Check:'
            curl -s http://localhost:80/docs >/dev/null && echo '‚úÖ FastAPI docs accessible' || echo '‚ö†Ô∏è  API may still be starting'
            echo ''
            echo 'External Access:'
            echo 'üìç Your API is available at: http://'\$(curl -s ipinfo.io/ip)':80'
            echo 'üìñ API Documentation: http://'\$(curl -s ipinfo.io/ip)':80/docs'
            echo ''
            echo 'Disk Usage:'
            df -h / | head -2
            echo '========================================='
            echo '‚úÖ DEPLOYMENT COMPLETED SUCCESSFULLY!'
            echo '========================================='
          "
      - name: Final cleanup
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST_BE }} "
            # Clean up pip cache and temp files after installation
            sudo python3 -m pip cache purge 2>/dev/null || python3 -m pip cache purge 2>/dev/null || true
            sudo rm -rf /tmp/* 2>/dev/null || true
          "
